"use client";

import { useState, useRef, useEffect } from "react";
import { cn } from "@/lib/utils";
import { sendChatMessageStream } from "@/services/chat-service";
import { WidgetData } from "@/context/widget-context";
import {
  ChatHeader,
  ActiveContextSection,
  MessagesArea,
  PromptSuggestions,
  ChatInput,
  ChatErrorBoundary,
  generateDynamicPrompts,
  getPromptButtonStyle,
  getContextSummary,
  type ActiveContext,
  type Message,
} from "./chat-sidebar/";

interface ChatSidebarProps {
  onClose: () => void;
  className?: string;
}

export const ChatSidebar = ({ onClose, className }: ChatSidebarProps) => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputValue, setInputValue] = useState("");
  const [isSending, setIsSending] = useState(false);
  const [isThinking, setIsThinking] = useState(false);
  const [promptsVisible, setPromptsVisible] = useState(true);
  const [activeContexts, setActiveContexts] = useState<ActiveContext[]>([]);
  const [isContextExpanded, setIsContextExpanded] = useState(false);
  const [isPromptsExpanded, setIsPromptsExpanded] = useState(false);

  const [conversationId, setConversationId] = useState<string | null>(null);

  useEffect(() => {
    if (!conversationId) {
      // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡∏î‡∏∂‡∏á conversationId ‡∏à‡∏≤‡∏Å backend ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
      const newConversationId = crypto.randomUUID(); // ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å backend
      setConversationId(newConversationId);
    }
  }, [conversationId]);

  const latestMessagesRef = useRef<Message[]>(messages);
  useEffect(() => {
    latestMessagesRef.current = messages;
  }, [messages]);

  // üõ°Ô∏è Safe JSON stringify function to handle circular references
  const safeStringify = (obj: unknown): string => {
    const seen = new Set();
    try {
      return JSON.stringify(
        obj,
        (key, value) => {
          if (typeof value === "object" && value !== null) {
            if (seen.has(value)) {
              return "[Circular Reference]";
            }
            seen.add(value);
          }

          // Handle specific problematic types
          if (typeof value === "function") {
            return "[Function]";
          }
          if (value instanceof Date) {
            return value.toISOString();
          }
          if (value instanceof Error) {
            return `[Error: ${value.message}]`;
          }

          // Handle DOM elements or React elements
          if (
            value &&
            typeof value === "object" &&
            (value.nodeType ||
              value.$$typeof ||
              (value.constructor &&
                value.constructor.name &&
                !["Object", "Array"].includes(value.constructor.name)))
          ) {
            return `[${value.constructor?.name || "ComplexObject"}]`;
          }

          // Limit string length to prevent extremely long outputs
          if (typeof value === "string" && value.length > 1000) {
            return value.substring(0, 1000) + "... [truncated]";
          }

          return value;
        },
        2
      );
    } catch (error) {
      console.error("Stringify error:", error);
      return `[Error serializing data: ${
        error instanceof Error ? error.message : "Unknown error"
      }]`;
    }
  };

  // üõ°Ô∏è Helper function to create safe message objects
  const createSafeMessage = (
    id: string,
    type: "user" | "bot",
    content: unknown,
    timestamp: Date = new Date()
  ): Message => {
    let safeContent: string;

    if (typeof content === "string") {
      safeContent = content;
    } else if (content === null || content === undefined) {
      safeContent = "";
    } else if (typeof content === "object") {
      // ‡πÉ‡∏ä‡πâ safeStringify ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö object ‡πÅ‡∏ó‡∏ô String()
      safeContent = safeStringify(content);
    } else {
      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö primitive types ‡∏≠‡∏∑‡πà‡∏ô‡πÜ (number, boolean, etc.)
      safeContent = String(content);
    }

    return {
      id: String(id),
      type,
      content: safeContent,
      timestamp,
    };
  };

  // üéØ Handle ‡πÄ‡∏û‡∏¥‡πà‡∏° Context ‡∏à‡∏≤‡∏Å Widget
  const handleContextAdd = (widget: WidgetData) => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ widget ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const exists = activeContexts.some((ctx) => ctx.widget.id === widget.id);

    if (exists) {
      // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ã‡πâ‡∏≥
      const warningMessage = createSafeMessage(
        `warning-${Date.now()}`,
        "bot",
        `‚ö†Ô∏è "${widget.name}" ‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô Context ‡πÅ‡∏•‡πâ‡∏ß\n‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà`
      );
      setMessages((prev) => [...prev, warningMessage]);
      return;
    }

    const newContext: ActiveContext = {
      widget: {
        id: widget.id,
        name: widget.name,
        description: widget.description,
        data: widget.data,
      },
      addedAt: new Date(),
    };

    // üìù ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏° context

    setActiveContexts((prev) => {
      const updatedContexts = [...prev, newContext];
      return updatedContexts;
    });

    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô chat
    const contextMessage = createSafeMessage(
      `context-${Date.now()}`,
      "bot",
      `‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° Context: "${widget.name}" ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß\n‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ`
    );

    setMessages((prev) => [...prev, contextMessage]);
  };

  // üóëÔ∏è Remove Context
  const handleContextRemove = (widgetId: string) => {
    const removedWidget = activeContexts.find(
      (ctx) => ctx.widget.id === widgetId
    );

    setActiveContexts((prev) =>
      prev.filter((ctx) => ctx.widget.id !== widgetId)
    );

    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏•‡∏ö context
    if (removedWidget) {
      const removeMessage = createSafeMessage(
        `remove-${Date.now()}`,
        "bot",
        `üóëÔ∏è ‡∏•‡∏ö Context: "${removedWidget.widget.name}" ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß\n‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏° Widget ‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ`
      );

      setMessages((prev) => [...prev, removeMessage]);
    }
  };

  // Handle prompt click
  const handlePromptClick = (prompt: string) => {
    // Ensure prompt is always a string
    const safePrompt = typeof prompt === "string" ? prompt : String(prompt);

    setInputValue(""); // Clear input first to prevent double sending
    handleSendMessage(safePrompt);
  };

  const handleSendMessage = async (customMessage?: string) => {
    const messageContent = customMessage || inputValue.trim();
    if (!messageContent || isThinking) return;

    // Ensure message content is always a string
    const safeMessageContent =
      typeof messageContent === "string"
        ? messageContent
        : String(messageContent);

    const userMessage = createSafeMessage(
      Date.now().toString(),
      "user",
      safeMessageContent
    );

    const streamingId = `streaming-${Date.now()}`;

    // Set initial states early to prevent multiple submissions
    setMessages((prev) => [...prev, userMessage]);
    setInputValue("");
    setIsSending(true);
    setIsThinking(true);
    setPromptsVisible(false);

    try {
      let botReply = "";

      // ü§ñ ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "AI ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏¥‡∏î..." ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô
      setMessages((prev) => [
        ...prev,
        createSafeMessage(
          streamingId,
          "bot",
          "thinking" // ‡πÉ‡∏ä‡πâ "thinking" ‡πÄ‡∏õ‡πá‡∏ô flag ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô
        ),
      ]);

      // üéØ ‡∏™‡∏£‡πâ‡∏≤‡∏á System Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö AI ‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡∏ï‡∏£‡∏á‡∏à‡∏∏‡∏î
      const systemMessage =
        activeContexts.length > 0
          ? "‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô AI ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏ö‡∏ö‡∏ï‡∏£‡∏á‡∏à‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• context ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°"
          : "‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô AI ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏à‡∏≥‡∏ô‡∏≥ ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏ö‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå";

      const historyMessages: {
        role: "user" | "assistant" | "system";
        content: string;
      }[] = [...latestMessagesRef.current, userMessage]
        .filter((msg) => msg.content !== "thinking") // üêõ ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° thinking ‡∏≠‡∏≠‡∏Å
        .map((msg) => ({
          role: msg.type === "user" ? "user" : "assistant",
          content: msg.content,
        }));

      // üéØ ‡πÄ‡∏û‡∏¥‡πà‡∏° Context ‡∏à‡∏≤‡∏Å Active Widgets
      if (activeContexts.length > 0) {
        const contextPrompt = activeContexts
          .map((ctx, index) => {
            try {
              // Use safe stringify to prevent circular reference errors
              const dataString = ctx.widget.data
                ? safeStringify(ctx.widget.data)
                : "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•";

              return `Widget: ${ctx.widget.name}\nDescription: ${
                ctx.widget.description || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢"
              }\nData: ${dataString}`;
            } catch (error) {
              console.error(`‚ùå Error processing widget ${index + 1}:`, error);
              return `Widget: ${ctx.widget.name}\nDescription: ${
                ctx.widget.description || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢"
              }\nData: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ`;
            }
          })
          .join("\n\n---\n\n");

        //  ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ï‡πá‡∏°‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ widget

        historyMessages.unshift({
          role: "system",
          content: `${systemMessage}\n\n‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• context ‡∏à‡∏≤‡∏Å widgets ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:\n\n${contextPrompt}\n\n‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à`,
        });
      } else {
        historyMessages.unshift({
          role: "system",
          content: systemMessage,
        });
      }

      await sendChatMessageStream(
        userMessage.content,
        (chunk: string) => {
          try {
            // Ensure chunk is always a string
            const safeChunk = typeof chunk === "string" ? chunk : String(chunk);

            if (botReply === "") {
              setIsThinking(false);
              setMessages((prev) =>
                prev.map((msg) =>
                  msg.id === streamingId ? { ...msg, content: safeChunk } : msg
                )
              );
            }

            botReply += safeChunk;
            setMessages((prev) =>
              prev.map((msg) =>
                msg.id === streamingId ? { ...msg, content: botReply } : msg
              )
            );
          } catch (error) {
            console.error("‚ùå Error updating message chunk:", error);
          }
        },
        historyMessages,
        conversationId || undefined,
        () => {
          setIsSending(false);
          setIsThinking(false);
        }
      );
    } catch (error) {
      console.error("‚ùå Error ‡∏à‡∏≤‡∏Å AI:", error);
      console.error(
        "‚ùå Error stack:",
        error instanceof Error ? error.stack : "Unknown error"
      );
      console.error("‚ùå Error details:", {
        messageContent,
        activeContextsCount: activeContexts.length,
        hasContext: activeContexts.length > 0,
      });

      setIsThinking(false);
      setIsSending(false);

      // Remove thinking message and add error message
      setMessages((prev) => [
        ...prev.filter((msg) => msg.id !== streamingId),
        createSafeMessage(
          Date.now().toString(),
          "bot",
          "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ AI ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á\n\n" +
            (error instanceof Error
              ? `‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: ${error.message}`
              : "‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏")
        ),
      ]);
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === "Enter" && !e.shiftKey && !isThinking && inputValue.trim()) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const generalPrompts = [
    "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏£?",
    "‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏≠‡∏á‡∏ä‡πà‡∏ß‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?",
    "‡∏Ñ‡∏ß‡∏£‡∏Ç‡∏≤‡∏¢‡∏ó‡∏≠‡∏á‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏´‡∏°?",
    "‡∏à‡∏≥‡∏ô‡∏≥‡∏ó‡∏≠‡∏á‡∏ó‡∏≥‡∏¢‡∏±‡∏á‡πÑ‡∏á?",
    "‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?",
  ];

  const contextPrompts = generateDynamicPrompts(activeContexts);

  return (
    <ChatErrorBoundary>
      <div
        className={cn(
          "w-148 bg-gradient-to-b from-white to-gray-50 border-l border-gray-200 flex flex-col h-full shadow-lg",
          className
        )}
        data-chat-sidebar
      >
        <ChatHeader
          onClose={onClose}
          onContextAdded={handleContextAdd}
          activeContexts={activeContexts}
        />

        <ActiveContextSection
          activeContexts={activeContexts}
          isExpanded={isContextExpanded}
          onToggleExpanded={() => setIsContextExpanded(!isContextExpanded)}
          onContextRemove={handleContextRemove}
          getContextSummary={() => getContextSummary(activeContexts)}
        />

        <MessagesArea messages={messages} />

        {promptsVisible && activeContexts.length === 0 && !isThinking && (
          <PromptSuggestions
            isExpanded={isPromptsExpanded}
            onToggleExpanded={() => setIsPromptsExpanded(!isPromptsExpanded)}
            prompts={generalPrompts}
            onPromptClick={handlePromptClick}
            isLoading={isSending || isThinking}
            title="‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"
            variant="general"
          />
        )}

        {promptsVisible && activeContexts.length > 0 && !isThinking && (
          <PromptSuggestions
            isExpanded={isPromptsExpanded}
            onToggleExpanded={() => setIsPromptsExpanded(!isPromptsExpanded)}
            prompts={contextPrompts}
            onPromptClick={handlePromptClick}
            isLoading={isSending || isThinking}
            getPromptButtonStyle={getPromptButtonStyle}
            title="‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"
            subtitle="‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞"
            variant="context"
          />
        )}

        <ChatInput
          inputValue={inputValue}
          onInputChange={setInputValue}
          onSendMessage={handleSendMessage}
          onKeyPress={handleKeyPress}
          isThinking={isThinking}
          hasContext={activeContexts.length > 0}
        />
      </div>
    </ChatErrorBoundary>
  );
};
