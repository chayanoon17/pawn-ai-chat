"use client";

import { useEffect, useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import apiClient from "@/lib/api";
import { useWidgetRegistration } from "@/context/widget-context";

type GoldPrice = {
  id: number;
  goldBarBuy: number;
  goldBarSell: number;
  goldJewelryBuy: number;
  goldJewelrySell: number;
  createdAt: string;
  updatedAt: string;
};

export const GoldPriceCard = () => {
  const [latestPrice, setLatestPrice] = useState<GoldPrice | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(true);

  // üåü ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏≠‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
  useEffect(() => {
    const fetchGoldPrice = async () => {
      try {
        setIsLoading(true);
        setError(null);

        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏≠‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        const response = await apiClient.get<GoldPrice>(
          "/api/v1/gold-price/latest"
        );

        setLatestPrice(response.data);

        // Log ‡πÉ‡∏ô development mode
        if (process.env.NEXT_PUBLIC_DEBUG_AUTH === "true") {
          console.log("‚ú® Gold price loaded:", response.data);
        }
      } catch (err: unknown) {
        const error = err as {
          response?: { data?: { message?: string } };
          message?: string;
        };
        const errorMessage =
          error.response?.data?.message ||
          error.message ||
          "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏≠‡∏á‡πÑ‡∏î‡πâ";
        setError(errorMessage);

        // Log error ‡πÉ‡∏ô development mode
        if (process.env.NEXT_PUBLIC_DEBUG_AUTH === "true") {
          console.error("‚ùå Failed to fetch gold price:", err);
        }
      } finally {
        setIsLoading(false);
      }
    };

    fetchGoldPrice();
  }, []);

  // üéØ Register Widget ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Chat ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô Context ‡πÑ‡∏î‡πâ
  useWidgetRegistration(
    "gold-price",
    "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á",
    "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ã‡∏∑‡πâ‡∏≠-‡∏Ç‡∏≤‡∏¢ ‡∏ó‡∏±‡πâ‡∏á‡∏ó‡∏≠‡∏á‡πÅ‡∏ó‡πà‡∏á‡πÅ‡∏•‡∏∞‡∏ó‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏û‡∏£‡∏£‡∏ì ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î",
    latestPrice
      ? {
          goldBarBuy: latestPrice.goldBarBuy,
          goldBarSell: latestPrice.goldBarSell,
          goldJewelryBuy: latestPrice.goldJewelryBuy,
          goldJewelrySell: latestPrice.goldJewelrySell,
          lastUpdated: latestPrice.updatedAt,
          priceSpreadBar: latestPrice.goldBarSell - latestPrice.goldBarBuy,
          priceSpreadJewelry:
            latestPrice.goldJewelrySell - latestPrice.goldJewelryBuy,
        }
      : null
  );

  const formatPrice = (value: number) =>
    value.toLocaleString("th-TH", {
      minimumFractionDigits: 2,
      maximumFractionDigits: 2,
    });

  const formatDate = (iso: string) => {
    const date = new Date(iso);

    return date.toLocaleString("th-TH", {
      timeZone: "Asia/Bangkok",
      day: "numeric",
      month: "long",
      year: "numeric",
      hour: "2-digit",
      minute: "2-digit",
    });
  };

  return (
    <Card className="mb-6">
      <CardHeader className="pb-3">
        <div className="flex flex-col space-y-2">
          <div className="flex items-center space-x-2">
            <div className="w-8 h-8 bg-orange-200 rounded-lg flex items-center justify-center">
              ‚ú®
            </div>
            <div>
              <CardTitle className="text-[24px] font-semibold">
                ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á
              </CardTitle>
              <p className="text-sm text-[#36B8EE]">
                {isLoading
                  ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•..."
                  : latestPrice
                  ? `‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ${formatDate(latestPrice.updatedAt)}`
                  : "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"}
              </p>
            </div>
          </div>
          <div className="h-px bg-gray-300 w-full" />
        </div>
      </CardHeader>

      <CardContent className="-mt-5">
        {/* Loading State */}
        {isLoading && (
          <div className="flex items-center justify-center py-8">
            <div className="flex items-center space-x-2">
              <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-orange-500"></div>
              <span className="text-gray-600">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏≠‡∏á...</span>
            </div>
          </div>
        )}

        {/* Error State */}
        {error && !isLoading && (
          <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-4">
            <div className="flex items-center space-x-2">
              <div className="text-red-500">‚ö†Ô∏è</div>
              <div>
                <p className="text-red-800 font-medium">‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î</p>
                <p className="text-red-600 text-sm">{error}</p>
              </div>
            </div>
          </div>
        )}

        {/* Data Display */}
        {latestPrice && !isLoading && (
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
            {/* ‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ó‡πà‡∏á */}
            <div className="bg-blue-50 p-4 rounded-lg">
              <div className="bg-orange-300 text-white px-3 py-1 rounded text-sm font-medium mb-4 inline-block">
                ‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ó‡πà‡∏á
              </div>
              <div className="flex items-baseline space-x-2">
                <div className="text-2xl font-bold text-gray-900">
                  {formatPrice(latestPrice.goldBarBuy)}
                </div>
                <div className="text-sm text-gray-600 relative -top-1">‡∏ö‡∏≤‡∏ó</div>
              </div>
            </div>

            {/* ‡∏ó‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏û‡∏£‡∏£‡∏ì */}
            <div className="bg-blue-50 p-4 rounded-lg">
              <div className="bg-orange-300 text-white px-3 py-1 rounded text-sm font-medium mb-4 inline-block">
                ‡∏ó‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏û‡∏£‡∏£‡∏ì
              </div>
              <div className="flex items-baseline space-x-2">
                <div className="text-2xl font-bold text-gray-900">
                  {formatPrice(latestPrice.goldJewelryBuy)}
                </div>
                <div className="text-sm text-gray-600 relative -top-1">‡∏ö‡∏≤‡∏ó</div>
              </div>
            </div>

            {/* ‡∏ó‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏û‡∏£‡∏£‡∏ì 70% (‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì) */}
            <div className="bg-blue-50 p-4 rounded-lg">
              <div className="bg-orange-300 text-white px-3 py-1 rounded text-sm font-medium mb-4 inline-block">
                ‡∏ó‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏û‡∏£‡∏£‡∏ì 70%
              </div>
              <div className="flex items-baseline space-x-2">
                <div className="text-2xl font-bold text-gray-900">
                  ‚âà{formatPrice(latestPrice.goldJewelryBuy * 0.7)}
                </div>
                <div className="text-sm text-gray-600 relative -top-1">‡∏ö‡∏≤‡∏ó</div>
              </div>
            </div>

            {/* ‡∏£‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏≥‡∏ö‡∏≤‡∏ó‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô (‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏•‡πá‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏Å‡πá‡πÑ‡∏î‡πâ) */}
            <div className="bg-blue-50 p-4 rounded-lg">
              <div className="bg-gray-600 text-white px-3 py-1 rounded text-sm font-medium mb-4 inline-block">
                ‡∏£‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏≥‡∏ö‡∏≤‡∏ó‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô
              </div>
              <div className="flex items-baseline space-x-2">
                <div className="text-2xl font-bold text-gray-900">
                  {formatPrice(latestPrice.goldBarBuy * 0.7)}{" "}
                  {/* ‡∏™‡∏°‡∏°‡∏∏‡∏ï‡∏¥‡∏•‡∏î‡∏•‡∏á 100 ‡∏ö‡∏≤‡∏ó */}
                </div>
                <div className="text-sm text-gray-600 relative -top-1">‡∏ö‡∏≤‡∏ó</div>
              </div>
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  );
};
