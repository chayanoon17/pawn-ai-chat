import Image from "next/image";
import { useState, useEffect, useCallback } from "react";
import {
  XAxis,
  YAxis,
  CartesianGrid,
  ResponsiveContainer,
  Area,
  AreaChart,
} from "recharts";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { ChartContainer, ChartTooltip } from "@/components/ui/chart";
import apiClient from "@/lib/api";
import { Download, Upload, FileBarChart } from "lucide-react";
import { useWidgetRegistration } from "@/context/widget-context";

interface WeeklyOperationData {
  total: number;
  date: string;
}

interface OperationSummary {
  thisWeek: WeeklyOperationData[];
  lastWeek: WeeklyOperationData[];
  total: number;
  totalThisWeek: number;
  totalLastWeek: number;
  percentChange: number;
}

interface WeeklyOperationResponse {
  branchId: number;
  cashIn: OperationSummary;
  cashOut: OperationSummary;
  timestamp: string;
}

// üìä Props ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Widget
interface WeeklyOperationSummaryProps {
  branchId: string;
  date: string;
  isLoading?: boolean;
}

// üé® Chart Configuration
const chartConfig = {
  ‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏ô‡∏µ‡πâ: {
    label: "‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡∏£‡∏±‡∏ö (‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏ô‡∏µ‡πâ)",
    color: "#059669", // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡πÄ‡∏Ç‡πâ‡∏°
  },
  ‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß: {
    label: "‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡∏£‡∏±‡∏ö (‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß)",
    color: "#fb7185", // ‡∏ä‡∏°‡∏û‡∏π‡∏™‡πâ‡∏°
  },
  ‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡∏à‡πà‡∏≤‡∏¢‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏ô‡∏µ‡πâ: {
    label: "‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡∏à‡πà‡∏≤‡∏¢ (‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏ô‡∏µ‡πâ)",
    color: "#0284c7", // ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Ç‡πâ‡∏°
  },
  ‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡∏à‡πà‡∏≤‡∏¢‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß: {
    label: "‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡∏à‡πà‡∏≤‡∏¢ (‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß)",
    color: "#f59e0b", // ‡∏™‡πâ‡∏°‡∏ó‡∏≠‡∏á
  },
};

export const WeeklyOperationSummary = ({
  branchId,
  date,
  isLoading = false,
}: WeeklyOperationSummaryProps) => {
  // üìä State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const [data, setData] = useState<WeeklyOperationResponse | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // üéØ Helper functions ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat("th-TH").format(amount);
  };

  const formatDate = (iso: string) => {
    const date = new Date(iso);
    return date.toLocaleString("th-TH", {
      timeZone: "Asia/Bangkok",
      day: "numeric",
      month: "long",
      year: "numeric",
      hour: "2-digit",
      minute: "2-digit",
    });
  };

  const formatPercentChange = (percent: number) => {
    const isPositive = percent >= 0;
    const icon = isPositive ? "/icons/up.png" : "/icons/down.png"; // üëà ‡πÉ‡∏ä‡πâ path public/
    const text = isPositive ? "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô" : "‡∏•‡∏î‡∏•‡∏á";
    const color = isPositive ? "text-[#02B670]" : "text-red-600";

    return {
      icon, // üëà ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å emoji
      text: `${text} ${Math.abs(percent).toFixed(2)}%`,
      color,
    };
  };

  // üîÑ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API
  const fetchWeeklyOperationSummary = useCallback(async () => {
    if (!branchId || isLoading) return;

    try {
      setLoading(true);
      setError(null);

      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå
      const response = await apiClient.get<WeeklyOperationResponse>(
        `/api/v1/branches/weekly-operation/summary?branchId=${branchId}&date=${date}`
      );

      setData(response.data);

      // Log ‡πÉ‡∏ô development mode
      if (process.env.NEXT_PUBLIC_DEBUG_AUTH === "true") {
        console.log("‚ú® Weekly operation summary loaded:", response.data);
      }
    } catch (err) {
      console.error("‚ùå Error fetching weekly operation summary:", err);
      setError("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ");
    } finally {
      setLoading(false);
    }
  }, [branchId, date, isLoading]);

  // üéØ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÄ‡∏°‡∏∑‡πà‡∏≠ filter ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
  useEffect(() => {
    fetchWeeklyOperationSummary();
  }, [branchId, date, fetchWeeklyOperationSummary]);

  // üìä ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≤‡∏´ - ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• thisWeek ‡πÅ‡∏•‡∏∞ lastWeek
  const prepareChartData = (
    thisWeekData: WeeklyOperationData[],
    lastWeekData: WeeklyOperationData[],
    dataKey: string
  ) => {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Map ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡πÉ‡∏ô‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå
    const chartDataMap = new Map();

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏ô‡∏µ‡πâ
    thisWeekData.forEach((item) => {
      const date = new Date(item.date);
      const dayName = date.toLocaleDateString("th-TH", { weekday: "long" }); // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô "long" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡πá‡∏°
      const dateStr = formatDate(item.date);
      const fullDate = date.toLocaleDateString("th-TH", {
        year: "numeric",
        month: "long",
        day: "numeric",
      });

      chartDataMap.set(dayName, {
        name: dayName, // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ô‡∏ö‡∏ô‡πÅ‡∏Å‡∏ô X
        fullDate: fullDate, // ‡πÄ‡∏Å‡πá‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡πá‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö tooltip
        dateStr: dateStr,
        [`${dataKey}‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏ô‡∏µ‡πâ`]: item.total / 1_000_000,
        [`${dataKey}‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß`]: 0,
      });
    });

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß
    lastWeekData.forEach((item) => {
      const date = new Date(item.date);
      const dayName = date.toLocaleDateString("th-TH", { weekday: "long" });
      const dateStr = formatDate(item.date);
      const fullDate = date.toLocaleDateString("th-TH", {
        year: "numeric",
        month: "long",
        day: "numeric",
      });

      if (chartDataMap.has(dayName)) {
        const existing = chartDataMap.get(dayName);
        existing[`${dataKey}‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß`] = item.total / 1_000_000;
        // ‡πÄ‡∏Å‡πá‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏î‡πâ‡∏ß‡∏¢
        existing.lastWeekDate = fullDate;
      } else {
        chartDataMap.set(dayName, {
          name: dayName,
          fullDate: fullDate,
          dateStr: dateStr,
          [`${dataKey}‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏ô‡∏µ‡πâ`]: 0,
          [`${dataKey}‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß`]: item.total / 1_000_000,
          lastWeekDate: fullDate,
        });
      }
    });

    // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô Array ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡πÉ‡∏ô‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå
    const weekOrder = [
      "‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå",
      "‡∏ß‡∏±‡∏ô‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£",
      "‡∏ß‡∏±‡∏ô‡∏û‡∏∏‡∏ò",
      "‡∏ß‡∏±‡∏ô‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ",
      "‡∏ß‡∏±‡∏ô‡∏®‡∏∏‡∏Å‡∏£‡πå",
      "‡∏ß‡∏±‡∏ô‡πÄ‡∏™‡∏≤‡∏£‡πå",
      "‡∏ß‡∏±‡∏ô‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå",
    ];
    return Array.from(chartDataMap.values()).sort(
      (a, b) => weekOrder.indexOf(a.name) - weekOrder.indexOf(b.name)
    );
  };

  const leftChartData = data
    ? prepareChartData(data.cashIn.thisWeek, data.cashIn.lastWeek, "‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡∏£‡∏±‡∏ö")
    : [];

  const rightChartData = data
    ? prepareChartData(
        data.cashOut.thisWeek,
        data.cashOut.lastWeek,
        "‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡∏à‡πà‡∏≤‡∏¢"
      )
    : [];
  // üéØ Custom Tooltip Component
  const CustomTooltip = ({
    active,
    payload,
    label,
  }: {
    active?: boolean;
    payload?: Array<{
      payload: {
        fullDate?: string;
        lastWeekDate?: string;
      };
      name: string;
      value: number;
      color: string;
    }>;
    label?: string;
  }) => {
    if (active && payload && payload.length) {
      const data = payload[0].payload;
      return (
        <div className="bg-white p-3 border border-gray-200 rounded-lg shadow-lg">
          <h3 className="font-semibold text-gray-800 mb-2">{label}</h3>
          {data.fullDate && (
            <p className="text-xs text-gray-500 mb-2">
              ‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏ô‡∏µ‡πâ: {data.fullDate}
            </p>
          )}
          {data.lastWeekDate && (
            <p className="text-xs text-gray-500 mb-2">
              ‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß: {data.lastWeekDate}
            </p>
          )}
          {payload.map(
            (
              entry: {
                name: string;
                value: number;
                color: string;
              },
              index: number
            ) => (
              <div key={index} className="flex items-center gap-2 mb-1">
                <div
                  className="w-3 h-3 rounded-full"
                  style={{ backgroundColor: entry.color }}
                />
                <span className="text-sm font-medium">{entry.name}:</span>
                <span className="text-sm font-bold">
                  {entry.value.toFixed(2)} ‡∏•‡πâ‡∏≤‡∏ô‡∏ö‡∏≤‡∏ó
                </span>
              </div>
            )
          )}
        </div>
      );
    }
    return null;
  };

  const cashInChange = data
    ? formatPercentChange(data.cashIn.percentChange)
    : null;
  const cashOutChange = data
    ? formatPercentChange(data.cashOut.percentChange)
    : null;

  // üéØ Register Widget ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Chat ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô Context ‡πÑ‡∏î‡πâ
  useWidgetRegistration(
    "weekly-operation-summary",
    "‡∏¢‡∏≠‡∏î‡∏£‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏≥‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î",
    "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡∏£‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡∏à‡πà‡∏≤‡∏¢‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏ô‡∏µ‡πâ‡∏Å‡∏±‡∏ö‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß",
    data
      ? {
          branchId: data.branchId,
          cashIn: {
            thisWeek: data.cashIn.thisWeek,
            lastWeek: data.cashIn.lastWeek,
            totalThisWeek: data.cashIn.totalThisWeek,
            totalLastWeek: data.cashIn.totalLastWeek,
            percentChange: data.cashIn.percentChange,
          },
          cashOut: {
            thisWeek: data.cashOut.thisWeek,
            lastWeek: data.cashOut.lastWeek,
            totalThisWeek: data.cashOut.totalThisWeek,
            totalLastWeek: data.cashOut.totalLastWeek,
            percentChange: data.cashOut.percentChange,
          },
          timestamp: data.timestamp,
          // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö AI
          analysis: {
            chartDataLeft: leftChartData,
            chartDataRight: rightChartData,
            summary: {
              cashInThisWeek: data.cashIn.totalThisWeek,
              cashInLastWeek: data.cashIn.totalLastWeek,
              cashInChange: data.cashIn.percentChange,
              cashOutThisWeek: data.cashOut.totalThisWeek,
              cashOutLastWeek: data.cashOut.totalLastWeek,
              cashOutChange: data.cashOut.percentChange,
            },
          },
        }
      : null,
    [data]
  );

  return (
    <Card className="bg-white border border-gray-200 shadow-sm">
      <CardHeader className="px-6 border-b border-gray-100">
        <div className="flex items-center space-x-3">
          <div className="p-3 bg-slate-100 rounded-lg">
            <FileBarChart className="w-5 h-5 text-slate-600" />
          </div>
          <div className="flex-1">
            <CardTitle className="text-lg font-semibold text-slate-80">
              ‡∏¢‡∏≠‡∏î‡∏£‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏≥‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
            </CardTitle>
            <span className="text-sm text-slate-500">
              {isLoading
                ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•..."
                : data
                ? `‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠ ${formatDate(data.timestamp)}`
                : branchId === "all"
                ? "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
                : "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"}
            </span>
          </div>
        </div>
      </CardHeader>

      <CardContent>
        {loading || isLoading ? (
          <div className="flex justify-center items-center h-64">
            <div className="flex items-center space-x-2">
              <div className="animate-spin rounded-full h-5 w-5 border-2 border-slate-300 border-t-slate-600"></div>
              <span className="text-slate-600">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</span>
            </div>
          </div>
        ) : error ? (
          <div className="bg-red-50 border border-red-100 rounded-lg p-4 mb-4">
            <div className="flex items-center space-x-2">
              <div className="text-red-500">‚ö†Ô∏è</div>
              <div>
                <p className="text-red-800 font-medium">
                  ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ
                </p>
                <p className="text-red-600 text-sm">{error}</p>
              </div>
            </div>
          </div>
        ) : !data ||
          (data.cashIn.thisWeek.length === 0 &&
            data.cashIn.lastWeek.length === 0 &&
            data.cashOut.thisWeek.length === 0 &&
            data.cashOut.lastWeek.length === 0) ? (
          <div className="text-center text-gray-400 py-16">
            <div className="text-4xl mb-2">üìä</div>
            <p className="text-sm">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏£‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏≥‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</p>
            <p className="text-sm">‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏≤‡∏Ç‡∏≤‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å</p>
          </div>
        ) : (
          <div className="h-fit grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
            <div className="space-y-4">
              <div className="flex items-center space-x-3">
                {/* Badge ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß */}
                <div className="flex items-center px-3 py-1 bg-green-100 text-green-600 rounded-md text-sm font-medium">
                  <Download className="w-4 h-4 mr-1" />
                  ‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡∏£‡∏±‡∏ö
                </div>

                {/* ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà */}
                <span className="text-sm text-gray-800 font-medium">
                  ‡∏ì ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {formatDate(date)}
                </span>
              </div>
              <div className="text-2xl font-bold">
                {data
                  ? `${formatCurrency(data.cashIn.totalThisWeek)} ‡∏ö‡∏≤‡∏ó`
                  : "0 ‡∏ö‡∏≤‡∏ó"}
              </div>
              <div className="flex items-center text-sm">
                {cashInChange && (
                  <>
                    <span className={`${cashInChange.color} flex items-center`}>
                      <Image
                        src={cashInChange.icon}
                        width={16}
                        height={16}
                        alt="trend"
                        className="w-4 h-4 mr-1 object-contain"
                      />
                      <span className="font-medium">{cashInChange.text}</span>
                    </span>

                    <span className="ml-1 text-[#344A61]">
                      ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß
                    </span>
                  </>
                )}
              </div>

              <p className="text-xs text-gray-500">
                ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏ô‡∏µ‡πâ‡∏Å‡∏±‡∏ö‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß
              </p>

              <div className="flex-1 mt-4">
                <ChartContainer config={chartConfig}>
                  <ResponsiveContainer width="100%" height="100%">
                    <AreaChart data={leftChartData}>
                      <CartesianGrid strokeDasharray="3 3" stroke="#f0f0f0" />
                      <XAxis dataKey="name" className="text-xs" />
                      <YAxis
                        className="text-xs"
                        tickFormatter={(value) => value}
                        label={{
                          value: "‡∏•‡πâ‡∏≤‡∏ô‡∏ö‡∏≤‡∏ó",
                          angle: -90,
                          position: "insideLeft",
                          offset: 10,
                          style: {
                            fontSize: "12px",
                            fill: "#6b7280",
                          },
                        }}
                      />
                      <ChartTooltip content={<CustomTooltip />} />
                      <Area
                        type="monotone"
                        dataKey="‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏ô‡∏µ‡πâ"
                        stroke="#059669"
                        fill="#059669"
                        fillOpacity={0.2}
                        strokeWidth={2}
                      />
                      <Area
                        type="monotone"
                        dataKey="‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß"
                        stroke="#fb7185"
                        fill="#fb7185"
                        fillOpacity={0.2}
                        strokeWidth={2}
                      />
                    </AreaChart>
                  </ResponsiveContainer>
                </ChartContainer>
                <div className="flex flex-wrap gap-4 mt-2 align-items-center justify-center">
                  <div className="flex items-center space-x-2">
                    <span
                      className="inline-block w-3 h-3 rounded-full"
                      style={{
                        backgroundColor:
                          chartConfig["‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏ô‡∏µ‡πâ"].color,
                      }}
                    ></span>
                    <span className="text-xs text-gray-600">
                      {chartConfig["‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏ô‡∏µ‡πâ"].label}
                    </span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <span
                      className="inline-block w-3 h-3 rounded-full"
                      style={{
                        backgroundColor:
                          chartConfig["‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß"].color,
                      }}
                    ></span>
                    <span className="text-xs text-gray-600">
                      {chartConfig["‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß"].label}
                    </span>
                  </div>
                </div>
              </div>
            </div>

            <div className="space-y-4">
              <div className="flex items-center space-x-3">
                {/* Badge ‡∏™‡∏µ‡∏ü‡πâ‡∏≤ */}
                <div className="flex items-center px-3 py-1 bg-blue-100 text-sky-600 rounded-md text-sm font-medium">
                  <Upload className="w-4 h-4 mr-1" />
                  ‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡∏à‡πà‡∏≤‡∏¢
                </div>

                {/* ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà */}
                <span className="text-sm text-gray-800 font-medium">
                  ‡∏ì ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {formatDate(date)}
                </span>
              </div>
              <div className="text-2xl font-bold">
                {data
                  ? `${formatCurrency(data.cashOut.totalThisWeek)} ‡∏ö‡∏≤‡∏ó`
                  : "0 ‡∏ö‡∏≤‡∏ó"}
              </div>
              <div className="flex items-center text-sm">
                {cashOutChange && (
                  <>
                    <span
                      className={`${cashOutChange.color} flex items-center`}
                    >
                      <Image
                        src={cashOutChange.icon}
                        width={16}
                        height={16}
                        alt="trend"
                        className="w-4 h-4 mr-1 object-contain"
                      />
                      <span className="font-medium">{cashOutChange.text}</span>
                    </span>
                    <span className="ml-1 text-[#344A61]">
                      ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß
                    </span>
                  </>
                )}
              </div>
              <p className="text-xs text-gray-500">
                ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡∏à‡πà‡∏≤‡∏¢‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏ô‡∏µ‡πâ‡∏Å‡∏±‡∏ö‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß
              </p>

              <div className="flex-1">
                <ChartContainer config={chartConfig}>
                  <ResponsiveContainer width="100%" height="100%">
                    <AreaChart data={rightChartData}>
                      <CartesianGrid strokeDasharray="3 3" stroke="#f0f0f0" />
                      <XAxis dataKey="name" className="text-xs" />
                      <YAxis
                        className="text-xs"
                        tickFormatter={(value) => value}
                        label={{
                          value: "‡∏•‡πâ‡∏≤‡∏ô‡∏ö‡∏≤‡∏ó",
                          angle: -90,
                          position: "insideLeft",
                          offset: 10,
                          style: {
                            fontSize: "12px",
                            fill: "#6b7280",
                          },
                        }}
                      />
                      <ChartTooltip content={<CustomTooltip />} />
                      <Area
                        type="monotone"
                        dataKey="‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡∏à‡πà‡∏≤‡∏¢‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏ô‡∏µ‡πâ"
                        stroke="#0284c7"
                        fill="#0284c7"
                        fillOpacity={0.2}
                        strokeWidth={2}
                      />
                      <Area
                        type="monotone"
                        dataKey="‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡∏à‡πà‡∏≤‡∏¢‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß"
                        stroke="#f59e0b"
                        fill="#f59e0b"
                        fillOpacity={0.2}
                        strokeWidth={2}
                      />
                    </AreaChart>
                  </ResponsiveContainer>
                </ChartContainer>
                <div className="flex flex-wrap gap-4 mt-2 align-items-center justify-center">
                  <div className="flex items-center space-x-2">
                    <span
                      className="inline-block w-3 h-3 rounded-full"
                      style={{
                        backgroundColor:
                          chartConfig["‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡∏à‡πà‡∏≤‡∏¢‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏ô‡∏µ‡πâ"].color,
                      }}
                    ></span>
                    <span className="text-xs text-gray-600">
                      {chartConfig["‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡∏à‡πà‡∏≤‡∏¢‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏ô‡∏µ‡πâ"].label}
                    </span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <span
                      className="inline-block w-3 h-3 rounded-full"
                      style={{
                        backgroundColor:
                          chartConfig["‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡∏à‡πà‡∏≤‡∏¢‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß"].color,
                      }}
                    ></span>
                    <span className="text-xs text-gray-600">
                      {chartConfig["‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡∏à‡πà‡∏≤‡∏¢‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß"].label}
                    </span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  );
};
