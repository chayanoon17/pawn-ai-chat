"use client";

import { useState, useRef, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { ScrollArea } from "@/components/ui/scroll-area";
import { X, Send, Bot, User, FileText } from "lucide-react";
import { cn } from "@/lib/utils";
import { sendChatMessageStream } from "@/lib/api";
import { AddContextButton } from "@/components/ui/add-context-button";
import { WidgetData } from "@/context/widget-context";
import ReactMarkdown from "react-markdown";
import remarkGfm from "remark-gfm";

interface ChatSidebarProps {
  isOpen: boolean;
  onClose: () => void;
  className?: string;
}

interface Message {
  id: string;
  type: "user" | "bot";
  content: string;
  timestamp: Date;
}

interface ActiveContext {
  widget: WidgetData;
  addedAt: Date;
}

// Mock data ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏≠‡∏á (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏î‡πâ)
const goldPrice = {
  buy: 30000, // ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ã‡∏∑‡πâ‡∏≠
  sell: 30500, // ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢
  source: "‡∏™‡∏°‡∏≤‡∏Ñ‡∏°‡∏Ñ‡πâ‡∏≤‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥",
};

// ü§ñ AI Thinking Animation Component
const ThinkingAnimation = () => (
  <div className="flex items-center space-x-1">
    <Bot className="w-3 h-3" />
    <span className="text-xs opacity-75">AI ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏¥‡∏î</span>
    <div className="flex space-x-1">
      <div className="w-1 h-1 bg-blue-500 rounded-full animate-bounce [animation-delay:-0.3s]"></div>
      <div className="w-1 h-1 bg-blue-500 rounded-full animate-bounce [animation-delay:-0.15s]"></div>
      <div className="w-1 h-1 bg-blue-500 rounded-full animate-bounce"></div>
    </div>
  </div>
);

// üìù Markdown Message Component
const MarkdownMessage = ({
  content,
  isUser,
}: {
  content: string;
  isUser: boolean;
}) => {
  if (isUser) {
    return <p className="text-sm whitespace-pre-wrap">{content}</p>;
  }

  return (
    <div className="prose prose-sm max-w-none text-gray-900">
      <ReactMarkdown
        remarkPlugins={[remarkGfm]}
        components={{
          // Headings
          h1: ({ children }) => (
            <h1 className="text-lg font-bold text-gray-900 mb-2 mt-1">
              {children}
            </h1>
          ),
          h2: ({ children }) => (
            <h2 className="text-base font-bold text-gray-900 mb-2 mt-1">
              {children}
            </h2>
          ),
          h3: ({ children }) => (
            <h3 className="text-sm font-bold text-gray-900 mb-1 mt-1">
              {children}
            </h3>
          ),
          h4: ({ children }) => (
            <h4 className="text-sm font-semibold text-gray-900 mb-1 mt-1">
              {children}
            </h4>
          ),
          // Paragraphs
          p: ({ children }) => (
            <p className="text-sm text-gray-900 mb-2 leading-relaxed">
              {children}
            </p>
          ),
          // Strong (Bold)
          strong: ({ children }) => (
            <strong className="font-semibold text-gray-900">{children}</strong>
          ),
          // Emphasis (Italic)
          em: ({ children }) => (
            <em className="italic text-gray-800">{children}</em>
          ),
          // Lists
          ul: ({ children }) => (
            <ul className="list-disc list-inside text-sm text-gray-900 mb-2 space-y-1">
              {children}
            </ul>
          ),
          ol: ({ children }) => (
            <ol className="list-decimal list-inside text-sm text-gray-900 mb-2 space-y-1">
              {children}
            </ol>
          ),
          li: ({ children }) => (
            <li className="text-sm text-gray-900 leading-relaxed">
              {children}
            </li>
          ),
          // Code
          code: ({ children, className }) => {
            const isInline = !className;
            if (isInline) {
              return (
                <code className="bg-gray-100 text-gray-800 px-1 py-0.5 rounded text-xs font-mono">
                  {children}
                </code>
              );
            }
            return (
              <pre className="bg-gray-100 p-2 rounded text-xs font-mono overflow-auto mb-2">
                <code>{children}</code>
              </pre>
            );
          },
          // Blockquotes
          blockquote: ({ children }) => (
            <blockquote className="border-l-4 border-blue-200 pl-3 py-1 bg-blue-50 text-sm text-gray-800 mb-2">
              {children}
            </blockquote>
          ),
          // Tables
          table: ({ children }) => (
            <div className="overflow-x-auto mb-2">
              <table className="min-w-full text-xs border-collapse border border-gray-300">
                {children}
              </table>
            </div>
          ),
          th: ({ children }) => (
            <th className="border border-gray-300 px-2 py-1 bg-gray-100 font-semibold text-left">
              {children}
            </th>
          ),
          td: ({ children }) => (
            <td className="border border-gray-300 px-2 py-1">{children}</td>
          ),
          // Horizontal Rule
          hr: () => <hr className="border-gray-300 my-2" />,
        }}
      >
        {content}
      </ReactMarkdown>
    </div>
  );
};

export const ChatSidebar = ({
  isOpen,
  onClose,
  className,
}: ChatSidebarProps) => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputValue, setInputValue] = useState("");
  const [isSending, setIsSending] = useState(false);
  const [isThinking, setIsThinking] = useState(false);
  const [promptsVisible, setPromptsVisible] = useState(true);
  const [activeContexts, setActiveContexts] = useState<ActiveContext[]>([]);

  const latestMessagesRef = useRef<Message[]>(messages);
  useEffect(() => {
    latestMessagesRef.current = messages;
  }, [messages]);

  // üéØ Handle ‡πÄ‡∏û‡∏¥‡πà‡∏° Context ‡∏à‡∏≤‡∏Å Widget
  const handleContextAdd = (widget: WidgetData) => {
    const newContext: ActiveContext = {
      widget,
      addedAt: new Date(),
    };

    setActiveContexts((prev) => {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ widget ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const exists = prev.some((ctx) => ctx.widget.id === widget.id);
      if (exists) return prev;

      return [...prev, newContext];
    });

    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô chat
    const contextMessage: Message = {
      id: `context-${Date.now()}`,
      type: "bot",
      content: `‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° Context: "${widget.name}" ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß\n‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ`,
      timestamp: new Date(),
    };

    setMessages((prev) => [...prev, contextMessage]);
  };

  // üóëÔ∏è Remove Context
  const handleContextRemove = (widgetId: string) => {
    setActiveContexts((prev) =>
      prev.filter((ctx) => ctx.widget.id !== widgetId)
    );
  };

  // üéØ Generate Dynamic Prompts ‡∏ï‡∏≤‡∏° Active Contexts
  const generateDynamicPrompts = (): string[] => {
    if (activeContexts.length === 0) return [];

    const prompts: string[] = [];
    const widgetIds = activeContexts.map((ctx) => ctx.widget.id);

    // Dashboard Context Prompts
    if (widgetIds.includes("weekly-operation-summary")) {
      prompts.push(
        "‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡∏∞‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡πÄ‡∏¢‡∏≠‡∏∞‡πÑ‡∏´‡∏°?",
        "‡∏ß‡∏±‡∏ô‡πÑ‡∏´‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡∏£‡∏±‡∏ö‡∏™‡∏π‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏ô‡∏µ‡πâ?",
        "‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ú‡∏•‡∏á‡∏≤‡∏ô‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏ô‡∏µ‡πâ‡∏Å‡∏±‡∏ö‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß",
        "‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?",
        "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏ó‡∏µ‡πà‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡∏£‡∏±‡∏ö‡∏•‡∏î‡∏•‡∏á"
      );
    }

    if (widgetIds.includes("gold-price")) {
      prompts.push(
        "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏≠‡∏á‡πÅ‡∏ó‡πà‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏û‡∏£‡∏£‡∏ì‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏£?",
        "‡∏™‡πà‡∏ß‡∏ô‡∏ï‡πà‡∏≤‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ã‡∏∑‡πâ‡∏≠-‡∏Ç‡∏≤‡∏¢‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?",
        "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏≠‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏´‡∏£?",
        "‡∏Ñ‡∏ß‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏≠‡∏á‡πÅ‡∏ó‡πà‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏û‡∏£‡∏£‡∏ì‡∏î‡∏µ?"
      );
    }

    if (widgetIds.includes("daily-operation-summary")) {
      prompts.push(
        "‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£‡∏à‡∏≤‡∏Å‡∏ï‡∏≠‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡πâ‡∏≤‡∏ô?",
        "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏î‡∏•‡∏á?",
        "‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏£?",
        "‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?"
      );
    }

    if (widgetIds.includes("contract-transaction-summary")) {
      prompts.push(
        "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡πÑ‡∏´‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ?",
        "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏£?",
        "‡∏Å‡∏≤‡∏£‡πÑ‡∏ñ‡πà‡∏ñ‡∏≠‡∏ô‡∏°‡∏µ‡∏Å‡∏µ‡πà‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£?",
        "‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?"
      );
    }

    if (widgetIds.includes("contract-transaction-details")) {
      prompts.push(
        "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?",
        "‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏ô‡πÑ‡∏´‡∏ô‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î?",
        "‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏´‡∏ô‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏¥‡∏¢‡∏°?",
        "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡∏ô‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏Ñ‡∏∑‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏´‡∏ô?"
      );
    }

    // Asset Type Context Prompts
    if (widgetIds.includes("asset-type-summary")) {
      prompts.push(
        "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô‡πÑ‡∏´‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏¥‡∏¢‡∏°‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î?",
        "‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?",
        "‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡∏µ‡πà‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó?",
        "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏´‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ô‡πâ‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î?"
      );
    }

    if (widgetIds.includes("top-ranking-asset-type")) {
      prompts.push(
        "‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö 1 ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?",
        "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏´‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î?",
        "‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö 1 ‡∏Å‡∏±‡∏ö‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö 2",
        "‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏£?"
      );
    }

    if (widgetIds.includes("ranking-by-period-asset-type")) {
      prompts.push(
        "‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ô‡∏µ‡πâ?",
        "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏´‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î?",
        "‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏´‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏≥‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î?",
        "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤"
      );
    }

    // Mixed Context Prompts (‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢ widget)
    if (widgetIds.length > 1) {
      // Smart combination prompts
      if (
        widgetIds.includes("weekly-operation-summary") &&
        widgetIds.includes("daily-operation-summary")
      ) {
        prompts.push(
          "‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏¢‡∏≠‡∏î‡∏£‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏≥‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏Å‡∏±‡∏ö‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô",
          "‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå"
        );
      }

      if (
        widgetIds.includes("gold-price") &&
        widgetIds.includes("weekly-operation-summary")
      ) {
        prompts.push(
          "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏≠‡∏á‡∏°‡∏µ‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏¢‡∏≠‡∏î‡∏£‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏≥‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?",
          "‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏≠‡∏á‡∏™‡∏π‡∏á‡∏°‡∏µ‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡πÑ‡∏´‡∏°?"
        );
      }

      if (
        widgetIds.includes("asset-type-summary") &&
        widgetIds.includes("contract-transaction-summary")
      ) {
        prompts.push(
          "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô‡πÑ‡∏´‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î?",
          "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô‡∏Å‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°"
        );
      }

      prompts.push(
        "‡∏™‡∏£‡∏∏‡∏õ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏´‡πâ‡∏ü‡∏±‡∏á",
        "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πà‡∏≤‡∏á‡πÜ",
        "‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?",
        "‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ"
      );
    }

    // Return unique prompts only (remove duplicates)
    return [...new Set(prompts)].slice(0, 10); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô 10 ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
  };

  // üé® Get prompt button color based on widget type
  const getPromptButtonStyle = (prompt: string) => {
    // Analysis prompts - ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
    if (
      prompt.includes("‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå") ||
      prompt.includes("‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö") ||
      prompt.includes("‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°")
    ) {
      return "text-sm bg-purple-50 border-purple-200 text-purple-700 hover:bg-purple-100";
    }
    // Summary prompts - ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏™‡∏£‡∏∏‡∏õ
    if (
      prompt.includes("‡∏™‡∏£‡∏∏‡∏õ") ||
      prompt.includes("‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°") ||
      prompt.includes("‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
    ) {
      return "text-sm bg-green-50 border-green-200 text-green-700 hover:bg-green-100";
    }
    // Specific data prompts - ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞
    if (
      prompt.includes("‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏£") ||
      prompt.includes("‡∏Å‡∏µ‡πà") ||
      prompt.includes("‡πÑ‡∏´‡∏ô")
    ) {
      return "text-sm bg-orange-50 border-orange-200 text-orange-700 hover:bg-orange-100";
    }
    // Default style
    return "text-sm bg-blue-50 border-blue-200 text-blue-700 hover:bg-blue-100";
  };

  // üìä Get Context Summary Info
  const getContextSummary = () => {
    if (activeContexts.length === 0) return null;

    const contextTypes = activeContexts.map((ctx) => {
      if (ctx.widget.id.includes("asset-type")) return "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô";
      if (ctx.widget.id.includes("transaction")) return "‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°";
      if (ctx.widget.id.includes("operation")) return "‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£";
      if (ctx.widget.id.includes("gold")) return "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏≠‡∏á";
      return "‡∏≠‡∏∑‡πà‡∏ô‡πÜ";
    });

    const uniqueTypes = [...new Set(contextTypes)];
    return uniqueTypes.join(", ");
  };

  const handleSendMessage = async () => {
    if (!inputValue.trim() || isSending || isThinking) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      type: "user",
      content: inputValue,
      timestamp: new Date(),
    };

    const streamingId = `streaming-${Date.now()}`;

    setMessages((prev) => [...prev, userMessage]);
    setInputValue("");
    setIsSending(true);
    setIsThinking(true); // ü§ñ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏¥‡∏î
    setPromptsVisible(false); // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡πÉ‡∏´‡πâ‡∏ã‡πà‡∏≠‡∏ô prompt

    try {
      let botReply = "";

      // ü§ñ ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "AI ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏¥‡∏î..." ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô
      setMessages((prev) => [
        ...prev,
        {
          id: streamingId,
          type: "bot",
          content: "thinking", // ‡πÉ‡∏ä‡πâ "thinking" ‡πÄ‡∏õ‡πá‡∏ô flag ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô
          timestamp: new Date(),
        },
      ]);

      // üéØ ‡∏™‡∏£‡πâ‡∏≤‡∏á System Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö AI ‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡∏ï‡∏£‡∏á‡∏à‡∏∏‡∏î
      const systemMessage =
        activeContexts.length > 0
          ? "‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô AI ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏ö‡∏ö‡∏ï‡∏£‡∏á‡∏à‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• context ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°"
          : "‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô AI ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏à‡∏≥‡∏ô‡∏≥ ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏ö‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå";

      const historyMessages: {
        role: "user" | "assistant" | "system";
        content: string;
      }[] = [...latestMessagesRef.current, userMessage]
        .filter((msg) => msg.content !== "thinking") // üêõ ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° thinking ‡∏≠‡∏≠‡∏Å
        .map((msg) => ({
          role: msg.type === "user" ? "user" : "assistant",
          content: msg.content,
        }));

      // üéØ ‡πÄ‡∏û‡∏¥‡πà‡∏° Context ‡∏à‡∏≤‡∏Å Active Widgets
      if (activeContexts.length > 0) {
        const contextPrompt = activeContexts
          .map((ctx) => {
            return `Widget: ${ctx.widget.name}\nDescription: ${
              ctx.widget.description
            }\nData: ${JSON.stringify(ctx.widget.data, null, 2)}`;
          })
          .join("\n\n---\n\n");

        historyMessages.unshift({
          role: "system",
          content: `${systemMessage}\n\n‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• context ‡∏à‡∏≤‡∏Å widgets ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:\n\n${contextPrompt}\n\n‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à`,
        });
      } else {
        historyMessages.unshift({
          role: "system",
          content: systemMessage,
        });
      }

      await sendChatMessageStream(
        userMessage.content,
        (chunk: string) => {
          // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö response ‡πÅ‡∏£‡∏Å ‡πÉ‡∏´‡πâ‡∏•‡∏ö‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏¥‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á
          if (botReply === "") {
            setIsThinking(false);
            setMessages((prev) =>
              prev.map((msg) =>
                msg.id === streamingId ? { ...msg, content: chunk } : msg
              )
            );
          }

          botReply += chunk;
          setMessages((prev) =>
            prev.map((msg) =>
              msg.id === streamingId ? { ...msg, content: botReply } : msg
            )
          );
        },
        historyMessages,
        () => {
          // üéØ Callback ‡πÄ‡∏°‡∏∑‡πà‡∏≠ streaming ‡∏à‡∏ö‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
          console.log("‚úÖ Streaming ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô - ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å input");
          setIsSending(false);
          setIsThinking(false);
        }
      );

      // ‚ùå ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á set message ‡∏ã‡πâ‡∏≥ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ streaming ‡∏à‡∏∞ update ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
      // ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÑ‡∏ß‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö final message ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    } catch (error) {
      console.error("‚ùå Error ‡∏à‡∏≤‡∏Å AI:", error);
      setIsThinking(false); // ü§ñ ‡∏´‡∏¢‡∏∏‡∏î‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏¥‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠ error
      setIsSending(false); // üîì ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å input ‡πÄ‡∏°‡∏∑‡πà‡∏≠ error
      setMessages((prev) => [
        ...prev.filter((msg) => msg.id !== streamingId), // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° thinking
        {
          id: Date.now().toString(),
          type: "bot",
          content: "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ AI ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
          timestamp: new Date(),
        },
      ]);
    } finally {
      // üîÑ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á reset states ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏à‡∏∞ handle ‡∏ú‡πà‡∏≤‡∏ô onComplete callback
      // ‡∏Å‡∏≤‡∏£ reset ‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏ô onComplete callback ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ô catch block ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (
      e.key === "Enter" &&
      !e.shiftKey &&
      !isSending &&
      !isThinking &&
      inputValue.trim()
    ) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  if (!isOpen) return null;

  return (
    <div
      className={cn(
        "w-80 bg-white border-l border-gray-200 flex flex-col h-full",
        className
      )}
    >
      {/* Header */}
      <div className="p-4 border-b border-gray-200 flex items-center justify-between">
        <div className="flex items-center space-x-2">
          <Bot className="w-5 h-5 text-blue-600" />
          <h3 className="font-semibold text-gray-900">Chat Pawn</h3>
        </div>
        <div className="flex items-center space-x-2">
          <AddContextButton
            onContextAdded={handleContextAdd}
            className="text-xs"
          />
          <Button variant="ghost" size="sm" onClick={onClose}>
            <X className="w-4 h-4" />
          </Button>
        </div>
      </div>

      {/* Active Contexts */}
      {activeContexts.length > 0 && (
        <div className="p-3 bg-blue-50 border-b border-blue-200">
          <div className="flex items-center justify-between mb-2">
            <span className="text-xs font-medium text-blue-700">
              Active Context
            </span>
            <div className="flex items-center space-x-2">
              <span className="text-xs text-blue-600">
                {activeContexts.length} widget(s)
              </span>
              {getContextSummary() && (
                <span className="text-xs text-blue-500 bg-blue-100 px-2 py-1 rounded">
                  {getContextSummary()}
                </span>
              )}
            </div>
          </div>
          <div className="space-y-1">
            {activeContexts.map((ctx) => (
              <div
                key={ctx.widget.id}
                className="flex items-center justify-between bg-white rounded p-2"
              >
                <div className="flex items-center space-x-2 flex-1 min-w-0">
                  <FileText className="w-3 h-3 text-blue-600 flex-shrink-0" />
                  <span className="text-xs font-medium text-gray-900 truncate">
                    {ctx.widget.name}
                  </span>
                </div>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => handleContextRemove(ctx.widget.id)}
                  className="h-6 w-6 p-0 text-gray-400 hover:text-red-500"
                >
                  <X className="w-3 h-3" />
                </Button>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Messages */}
      <ScrollArea className="flex-1 p-4 overflow-auto">
        <div className="space-y-4">
          {messages.map((message) => (
            <div
              key={message.id}
              className={`flex ${
                message.type === "user" ? "justify-end" : "justify-start"
              }`}
            >
              <div
                className={`max-w-[80%] rounded-lg px-3 py-2 ${
                  message.type === "user"
                    ? "bg-blue-600 text-white"
                    : "bg-gray-100 text-gray-900"
                }`}
              >
                <div className="flex items-center space-x-2 mb-1">
                  {message.type === "user" ? (
                    <User className="w-3 h-3" />
                  ) : message.content === "thinking" ? (
                    <ThinkingAnimation />
                  ) : (
                    <>
                      <Bot className="w-3 h-3" />
                      <span className="text-xs opacity-75">
                        {message.timestamp.toLocaleTimeString("th-TH", {
                          hour: "2-digit",
                          minute: "2-digit",
                        })}
                      </span>
                    </>
                  )}
                  {message.type === "user" && (
                    <span className="text-xs opacity-75">
                      {message.timestamp.toLocaleTimeString("th-TH", {
                        hour: "2-digit",
                        minute: "2-digit",
                      })}
                    </span>
                  )}
                </div>
                {message.content !== "thinking" && (
                  <MarkdownMessage
                    content={message.content}
                    isUser={message.type === "user"}
                  />
                )}
              </div>
            </div>
          ))}
        </div>
      </ScrollArea>

      {/* Input */}
      {promptsVisible && activeContexts.length === 0 && !isThinking && (
        <div className="px-4 pt-2">
          <div className="flex flex-wrap gap-2">
            {[
              "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏£?",
              "‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏≠‡∏á‡∏ä‡πà‡∏ß‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?",
              "‡∏Ñ‡∏ß‡∏£‡∏Ç‡∏≤‡∏¢‡∏ó‡∏≠‡∏á‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏´‡∏°?",
              "‡∏à‡∏≥‡∏ô‡∏≥‡∏ó‡∏≠‡∏á‡∏ó‡∏≥‡∏¢‡∏±‡∏á‡πÑ‡∏á?",
              "‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?",
            ].map((prompt) => (
              <Button
                key={prompt}
                variant="outline"
                size="sm"
                className="text-sm"
                disabled={isSending || isThinking}
                onClick={() => {
                  setInputValue(prompt);
                  handleSendMessage();
                }}
              >
                {prompt}
              </Button>
            ))}
          </div>
        </div>
      )}

      {/* Context-based Prompts */}
      {promptsVisible && activeContexts.length > 0 && !isThinking && (
        <div className="px-4 pt-2">
          <div className="mb-2 flex items-center justify-between">
            <span className="text-xs font-medium text-blue-700">
              ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å:
            </span>
            <span className="text-xs text-blue-500">
              {generateDynamicPrompts().length} ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
            </span>
          </div>
          <div className="flex flex-wrap gap-2">
            {generateDynamicPrompts().map((prompt) => (
              <Button
                key={prompt}
                variant="outline"
                size="sm"
                className={getPromptButtonStyle(prompt)}
                disabled={isSending || isThinking}
                onClick={() => {
                  setInputValue(prompt);
                  handleSendMessage();
                }}
              >
                {prompt}
              </Button>
            ))}
          </div>
        </div>
      )}

      <div className="p-4 border-t border-gray-200">
        <div className="flex space-x-2">
          <Input
            value={inputValue}
            onChange={(e) => setInputValue(e.target.value)}
            onKeyPress={handleKeyPress}
            placeholder={isThinking ? "AI ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏¥‡∏î..." : "‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°..."}
            className="flex-1"
            disabled={isThinking}
          />
          <Button
            onClick={handleSendMessage}
            size="sm"
            disabled={isThinking || !inputValue.trim()}
          >
            <Send className="w-4 h-4" />
          </Button>
        </div>
      </div>
    </div>
  );
};
