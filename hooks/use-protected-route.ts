/**
 * Protected Route Hook
 * Custom Hook ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô
 */

"use client";

import { useEffect } from "react";
import { useRouter } from "next/navigation";
import { useAuth } from "@/context/auth-context";

/**
 * Options ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ Protected Route
 */
interface UseProtectedRouteOptions {
  /** ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞ redirect ‡πÑ‡∏õ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ login (default: "/login") */
  redirectTo?: string;
  /** ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡∏ì‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö authentication (default: "Checking authentication...") */
  loadingMessage?: string;
  /** ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡∏ì‡∏∞ redirect (default: "Redirecting to login...") */
  redirectMessage?: string;
}

/**
 * Return type ‡∏Ç‡∏≠‡∏á useProtectedRoute hook
 */
interface UseProtectedRouteReturn {
  /** ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£ login */
  isAuthenticated: boolean;
  /** ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î */
  isLoading: boolean;
  /** ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ */
  user: any;
  /** ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡πÅ‡∏™‡∏î‡∏á */
  message: string;
  /** ‡∏Ñ‡∏ß‡∏£ render component ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà */
  shouldRender: boolean;
}

/**
 * Custom Hook ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Protected Routes
 *
 * @param options ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤
 * @returns ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
 *
 * @example
 * ```tsx
 * export default function DashboardPage() {
 *   const { shouldRender, message } = useProtectedRoute();
 *
 *   if (!shouldRender) {
 *     return <div>{message}</div>;
 *   }
 *
 *   return <div>Dashboard Content</div>;
 * }
 * ```
 */
export function useProtectedRoute(
  options: UseProtectedRouteOptions = {}
): UseProtectedRouteReturn {
  const {
    redirectTo = "/login",
    loadingMessage = "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô...",
    redirectMessage = "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö...",
  } = options;

  const { isAuthenticated, isLoading, user } = useAuth();
  const router = useRouter();

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞ redirect ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
   */
  useEffect(() => {
    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö authentication ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
    if (isLoading) return;

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ login ‡πÉ‡∏´‡πâ redirect
    if (!isAuthenticated) {
      // Log ‡πÉ‡∏ô development mode
      if (process.env.NEXT_PUBLIC_DEBUG_AUTH === "true") {
        console.log("üîê Protected route: Redirecting to login", {
          currentPath: window.location.pathname,
          redirectTo,
        });
      }

      router.push(redirectTo);
    }
  }, [isAuthenticated, isLoading, router, redirectTo]);

  /**
   * ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡πÅ‡∏™‡∏î‡∏á
   */
  let message = "";
  if (isLoading) {
    message = loadingMessage;
  } else if (!isAuthenticated) {
    message = redirectMessage;
  }

  /**
   * ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£ render component ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   */
  const shouldRender = !isLoading && isAuthenticated;

  return {
    isAuthenticated,
    isLoading,
    user,
    message,
    shouldRender,
  };
}

/**
 * Export ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
 */
export default useProtectedRoute;
