/**
 * Authentication Service
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Authentication logic ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
 */

import apiClient from "./api";
import { User } from "@/types/auth";
import { ApiResponse, LoginResponse } from "@/types/api";
import { PERMISSION_ACTIONS, MENU_NAMES } from "@/types/common";


export async function registerUser(data: {
  fullName: string;
  email: string;
  password: string;
  branch: number;
  role: number;
  status: string;
}) {
  const res = await apiClient.post("/api/auth/register", data);
  return res;
}
export async function getAllUsers() {
  const res = await apiClient.get("/api/auth/register"); // ‡∏´‡∏£‡∏∑‡∏≠ path ‡∏ó‡∏µ‡πà backend ‡∏Å‡∏≥‡∏´‡∏ô‡∏î GET users
  return res;
}



/**
 * Login Credentials Interface
 */
interface LoginCredentials {
  email: string;
  password: string;
}

/**
 * Authentication Service Class
 */
class AuthService {
  /**
   * ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢ email ‡πÅ‡∏•‡∏∞ password
   * httpOnly Cookie ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÇ‡∏î‡∏¢ backend
   */
  async login(credentials: LoginCredentials): Promise<LoginResponse> {
    try {
      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API login endpoint
      const response = await apiClient.post<LoginResponse>(
        "/api/auth/login",
        credentials
      );

      // Log success ‡πÉ‡∏ô development mode
      if (process.env.NEXT_PUBLIC_DEBUG_AUTH === "true") {
        console.log("üéâ Login successful:", {
          userId: response.data.userId,
        });
      }

      return response.data;
    } catch (error) {
      // Log error ‡πÉ‡∏ô development mode
      if (process.env.NEXT_PUBLIC_DEBUG_AUTH === "true") {
        console.error("‚ùå Login failed:", error);
      }

      throw error;
    }
  }

  /**
   * ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
   * Token ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô blacklist ‡πÅ‡∏•‡∏∞ httpOnly Cookie ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö
   */
  async logout(): Promise<void> {
    try {
      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API logout endpoint
      await apiClient.post("/api/auth/logout");

      // Log success ‡πÉ‡∏ô development mode
      if (process.env.NEXT_PUBLIC_DEBUG_AUTH === "true") {
        console.log("üëã Logout successful");
      }
    } catch (error) {
      // Log warning ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà throw error ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ logout ‡∏Ñ‡∏ß‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÄ‡∏™‡∏°‡∏≠‡πÉ‡∏ô frontend
      if (process.env.NEXT_PUBLIC_DEBUG_AUTH === "true") {
        console.warn(
          "‚ö†Ô∏è Logout API failed, but continuing with local logout:",
          error
        );
      }

      // ‡πÑ‡∏°‡πà throw error ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÅ‡∏°‡πâ API fail ‡πÄ‡∏£‡∏≤‡∏Å‡πá‡∏Ñ‡∏ß‡∏£ clear local state
    }
  }

  /**
   * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏à‡∏≤‡∏Å API
   * ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
   */
  async getCurrentUser(): Promise<User> {
    try {
      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
      // ‡∏õ‡∏£‡∏±‡∏ö path ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Backend API
      const response = await apiClient.get<User>("/api/auth/me");

      // Log success ‡πÉ‡∏ô development mode
      if (process.env.NEXT_PUBLIC_DEBUG_AUTH === "true") {
        console.log("üë§ Current user fetched:", {
          id: response.data.id,
          email: response.data.email,
          role: response.data.role.name,
        });
      }

      return response.data;
    } catch (error) {
      // Log error ‡πÉ‡∏ô development mode
      if (process.env.NEXT_PUBLIC_DEBUG_AUTH === "true") {
        console.error("‚ùå Failed to fetch current user:", error);
      }

      throw error;
    }
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   */
  hasPermission(user: User | null, action: string): boolean {
    if (!user || !user.role || !user.role.permissions) {
      return false;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ permission ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö action ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const hasPermission = user.role.permissions.some(
      (permission) => permission.action === action
    );

    // Log ‡πÉ‡∏ô development mode
    if (process.env.NEXT_PUBLIC_DEBUG_AUTH === "true") {
      console.log("üîç Permission check:", {
        action,
        hasPermission,
        userRole: user.role.name,
      });
    }

    return hasPermission;
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   */
  hasMenuAccess(user: User | null, menuName: string): boolean {
    if (!user || !user.role || !user.role.menuPermissions) {
      return false;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ menu permission ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö menuName ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const hasAccess = user.role.menuPermissions.some(
      (menuPermission) => menuPermission.menuName === menuName
    );

    // Log ‡πÉ‡∏ô development mode
    if (process.env.NEXT_PUBLIC_DEBUG_AUTH === "true") {
      console.log("üîç Menu access check:", {
        menuName,
        hasAccess,
        userRole: user.role.name,
      });
    }

    return hasAccess;
  }

  /**
   * Helper methods ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞
   */

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Admin ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   */
  isAdmin(user: User | null): boolean {
    return this.hasPermission(user, PERMISSION_ACTIONS.SYSTEM_ADMIN);
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
   */
  canManageUsers(user: User | null): boolean {
    return this.hasMenuAccess(user, MENU_NAMES.USER_MANAGEMENT);
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
   */
  canViewReports(user: User | null): boolean {
    return this.hasPermission(user, PERMISSION_ACTIONS.READ_REPORT);
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
   */
  canExportData(user: User | null): boolean {
    return this.hasPermission(user, PERMISSION_ACTIONS.EXPORT_REPORT);
  }
}

/**
 * Singleton Instance - ‡πÉ‡∏ä‡πâ instance ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ó‡∏±‡πà‡∏ß‡∏ó‡∏±‡πâ‡∏á‡πÅ‡∏≠‡∏û
 */
const authService = new AuthService();

export default authService;
