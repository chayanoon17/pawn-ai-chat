import { ApiResponse, ApiErrorResponse } from "@/types/api";

// Types ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö fetch API
interface FetchConfig extends RequestInit {
  timeout?: number;
}

interface FetchError extends Error {
  status?: number;
  response?: ApiErrorResponse;
}

/**
 * Get base URL from environment variable
 */
const getBaseUrl = (): string => {
  return process.env.NEXT_PUBLIC_API_URL || "";
};

/**
 * API Client Class - Singleton pattern ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ HTTP requests
 */
class ApiClient {
  private readonly baseURL: string;
  private readonly timeout: number;

  constructor() {
    this.baseURL = getBaseUrl();
    this.timeout = 30000; // 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ timeout

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ baseURL ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á
    if (!this.baseURL) {
      console.error("‚ùå API_URL is not set! Check environment variables.");
    }
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á default headers ‡∏û‡∏£‡πâ‡∏≠‡∏° configuration ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö httpOnly cookies
   */
  private getDefaultHeaders(): Record<string, string> {
    const headers: Record<string, string> = {
      "Content-Type": "application/json",
      Accept: "application/json",
    };

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° Authorization header ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ token ‡πÉ‡∏ô localStorage
    if (typeof window !== "undefined") {
      const token = localStorage.getItem("accessToken");
      if (token) {
        headers.Authorization = `Bearer ${token}`;
      }
    }

    return headers;
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á default config ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö fetch
   */
  private getDefaultConfig(): RequestInit {
    return {
      credentials: "include", // ‡∏™‡πà‡∏á cookies ‡πÅ‡∏•‡∏∞ authentication headers
      mode: "cors", // ‡πÄ‡∏û‡∏¥‡πà‡∏° CORS mode
      cache: "no-cache", // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô cache issues
      headers: {
        ...this.getDefaultHeaders(),
        // ‡πÄ‡∏û‡∏¥‡πà‡∏° headers ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö CORS ‡πÅ‡∏•‡∏∞ Azure
        "Access-Control-Allow-Credentials": "true",
        "X-Requested-With": "XMLHttpRequest",
      },
    };
  }

  /**
   * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ timeout ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö fetch request
   */
  private async fetchWithTimeout(
    url: string,
    config: RequestInit & { timeout?: number }
  ): Promise<Response> {
    const { timeout = this.timeout, ...fetchConfig } = config;

    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), timeout);

    try {
      const response = await fetch(url, {
        ...fetchConfig,
        signal: controller.signal,
      });

      clearTimeout(timeoutId);
      return response;
    } catch (error) {
      console.error("‚ùå fetch error:", {
        url,
        error: error instanceof Error ? error.message : error,
        name: error instanceof Error ? error.name : "Unknown",
        cause: error instanceof Error ? error.cause : undefined,
      });

      clearTimeout(timeoutId);

      // ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á error message ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
      if (error instanceof Error) {
        if (error.name === "AbortError" || /abort/i.test(error.message)) {
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô timeout ‡∏´‡∏£‡∏∑‡∏≠ manual abort
          const isTimeout =
            error.message.includes("timeout") ||
            !error.message.includes("reason");
          const message = isTimeout
            ? "‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
            : "‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á";

          const enhancedError = new Error(message);
          (enhancedError as any).originalError = error;
          throw enhancedError;
        }
      }

      throw error;
    }
  }

  /**
   * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Response Errors ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
   */
  private async handleResponse<T>(response: Response): Promise<ApiResponse<T>> {
    if (!response.ok) {
      let errorData: ApiErrorResponse | null = null;

      try {
        errorData = await response.json();
      } catch {
        // ‡∏ñ‡πâ‡∏≤ parse JSON ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
      }

      // Log error ‡πÉ‡∏ô development mode
      if (process.env.NEXT_PUBLIC_DEV_MODE === "true") {
        console.error("‚ùå API Error:", {
          status: response.status,
          message: errorData?.message,
          url: response.url,
        });
      }

      // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ error ‡∏ï‡∏≤‡∏° status code
      switch (response.status) {
        case 401:
          console.warn("üîê Unauthorized: Token may be expired");
          break;
        case 403:
          console.warn("üö´ Forbidden: Insufficient permissions");
          break;
        case 404:
          console.warn("üîç Not Found: Resource not found");
          break;
        case 429:
          console.warn("‚è≥ Rate Limited: Too many requests");
          break;
        case 500:
          console.error("üî• Server Error: Internal server error");
          break;
        default:
          console.error("‚ùì Unknown Error:", response.status);
      }

      const error: FetchError = new Error(
        errorData?.message || `HTTP Error ${response.status}`
      );
      error.status = response.status;
      error.response = errorData || undefined;
      throw error;
    }

    try {
      const data = await response.json();
      return data;
    } catch {
      throw new Error("Failed to parse response JSON");
    }
  }

  /**
   * Log request ‡πÉ‡∏ô development mode
   */
  private logRequest(method: string, url: string, data?: unknown): void {
    if (process.env.NEXT_PUBLIC_DEV_MODE === "true") {
      const detail: { method: string; url: string; data?: unknown | null } = {
        method: method.toUpperCase(),
        url,
      };

      if (data) detail.data = data;

      console.log("üöÄ API Request:", detail);
    }
  }

  /**
   * GET Request
   * @param url - endpoint URL
   * @param config - fetch configuration
   */
  async get<T = unknown>(
    url: string,
    config?: FetchConfig
  ): Promise<ApiResponse<T>> {
    const fullUrl = `${this.baseURL}${url}`;
    this.logRequest("GET", fullUrl);

    const response = await this.fetchWithTimeout(fullUrl, {
      ...this.getDefaultConfig(),
      ...config,
      method: "GET",
    });

    return this.handleResponse<T>(response);
  }

  /**
   * POST Request
   * @param url - endpoint URL
   * @param data - request body data
   * @param config - fetch configuration
   */
  async post<T = unknown>(
    url: string,
    data?: unknown,
    config?: FetchConfig
  ): Promise<ApiResponse<T>> {
    const fullUrl = `${this.baseURL}${url}`;
    this.logRequest("POST", fullUrl, data);

    const response = await this.fetchWithTimeout(fullUrl, {
      ...this.getDefaultConfig(),
      ...config,
      method: "POST",
      body: data ? JSON.stringify(data) : undefined,
    });

    return this.handleResponse<T>(response);
  }

  /**
   * PUT Request
   * @param url - endpoint URL
   * @param data - request body data
   * @param config - fetch configuration
   */
  async put<T = unknown>(
    url: string,
    data?: unknown,
    config?: FetchConfig
  ): Promise<ApiResponse<T>> {
    const fullUrl = `${this.baseURL}${url}`;
    this.logRequest("PUT", fullUrl, data);

    const response = await this.fetchWithTimeout(fullUrl, {
      ...this.getDefaultConfig(),
      ...config,
      method: "PUT",
      body: data ? JSON.stringify(data) : undefined,
    });

    return this.handleResponse<T>(response);
  }

  /**
   * DELETE Request
   * @param url - endpoint URL
   * @param config - fetch configuration
   */
  async delete<T = unknown>(
    url: string,
    config?: FetchConfig
  ): Promise<ApiResponse<T>> {
    const fullUrl = `${this.baseURL}${url}`;
    this.logRequest("DELETE", fullUrl);

    const response = await this.fetchWithTimeout(fullUrl, {
      ...this.getDefaultConfig(),
      ...config,
      method: "DELETE",
    });

    return this.handleResponse<T>(response);
  }

  /**
   * Download File (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö CSV, Excel, PDF etc.)
   * @param url - endpoint URL
   * @param filename - ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
   * @param config - fetch configuration
   */
  async download(
    url: string,
    filename: string,
    config?: FetchConfig
  ): Promise<void> {
    const fullUrl = `${this.baseURL}${url}`;
    this.logRequest("GET", fullUrl);

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á headers ‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
    const downloadHeaders = {
      ...this.getDefaultHeaders(),
      Accept: "text/csv,application/csv,application/octet-stream,*/*",
    };

    const response = await this.fetchWithTimeout(fullUrl, {
      ...this.getDefaultConfig(),
      ...config,
      method: "GET",
      headers: {
        ...downloadHeaders,
        ...config?.headers,
      },
    });

    if (!response.ok) {
      let errorMessage = `HTTP Error ${response.status}: ${response.statusText}`;

      try {
        const errorData = await response.json();
        errorMessage = errorData.message || errorMessage;
      } catch {
        // ‡∏ñ‡πâ‡∏≤ parse JSON ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏ä‡πâ error message ‡πÄ‡∏î‡∏¥‡∏°
      }

      throw new Error(errorMessage);
    }

    // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô blob
    const blob = await response.blob();

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á blob URL ‡πÅ‡∏•‡∏∞‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
    const blobUrl = window.URL.createObjectURL(blob);

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á element <a> ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
    const link = document.createElement("a");
    link.href = blobUrl;
    link.download = filename;
    document.body.appendChild(link);
    link.click();

    // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î
    document.body.removeChild(link);
    window.URL.revokeObjectURL(blobUrl);
  }

  /**
   * Stream Request (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Server-Sent Events ‡πÅ‡∏•‡∏∞ Streaming Responses)
   * @param url - endpoint URL
   * @param data - request body data
   * @param onChunk - callback ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö chunk ‡πÉ‡∏´‡∏°‡πà
   * @param onComplete - callback ‡πÄ‡∏°‡∏∑‡πà‡∏≠ stream ‡∏à‡∏ö
   * @param config - fetch configuration
   */
  async stream(
    url: string,
    data?: unknown,
    onChunk?: (chunk: string) => void,
    onComplete?: () => void,
    config?: FetchConfig
  ): Promise<void> {
    const fullUrl = `${this.baseURL}${url}`;
    this.logRequest("POST", fullUrl, data);

    // ‡πÉ‡∏ä‡πâ timeout ‡∏ó‡∏µ‡πà‡∏¢‡∏≤‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö streaming (2 ‡∏ô‡∏≤‡∏ó‡∏µ)
    const streamTimeout = config?.timeout || 120000;

    const response = await this.fetchWithTimeout(fullUrl, {
      ...this.getDefaultConfig(),
      ...config,
      timeout: streamTimeout,
      method: "POST",
      body: data ? JSON.stringify(data) : undefined,
    });

    if (!response.ok || !response.body) {
      throw new Error(`HTTP Error ${response.status}: ${response.statusText}`);
    }

    const reader = response.body.getReader();
    const decoder = new TextDecoder("utf-8");

    let buffer = "";
    let completed = false;
    let gotAnyChunk = false;

    const safeComplete = () => {
      if (!completed) {
        completed = true;
        onComplete?.();
      }
    };

    const emitContent = (text: unknown) => {
      if (typeof text === "string" && text.length > 0) {
        gotAnyChunk = true;
        onChunk?.(text);
      }
    };

    try {
      while (true) {
        const { done, value } = await reader.read();
        if (done) break;

        buffer += decoder.decode(value, { stream: true });

        let idx: number;
        while ((idx = buffer.indexOf("\n\n")) !== -1) {
          const rawBlock = buffer.slice(0, idx);
          buffer = buffer.slice(idx + 2);

          const block = rawBlock.replace(/\r/g, "").trim();
          if (!block) continue;

          // ‡∏û‡∏≤‡∏£‡πå‡∏™‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö SSE: ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á event: ‡πÅ‡∏•‡∏∞ data:
          let eventName = "message";
          const dataLines: string[] = [];

          for (const rawLine of block.split("\n")) {
            const line = rawLine.trim();
            if (!line || line.startsWith(":")) continue; // comment/keepalive
            if (line.startsWith("event:")) {
              eventName = line.slice(6).trim();
              continue;
            }
            if (line.startsWith("data:")) {
              dataLines.push(line.slice(5));
            }
          }

          const dataStr = dataLines.join("\n").trim();

          // ‡∏à‡∏ö‡∏™‡∏ï‡∏£‡∏µ‡∏° (‡∏™‡∏≠‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö)
          if (eventName === "done" || dataStr === "[DONE]") {
            safeComplete();
            return;
          }

          if (eventName === "error") {
            throw new Error(dataStr || "SSE error");
          }

          // ‡∏Ç‡πâ‡∏≤‡∏° ping/keepalive ‡∏ó‡∏µ‡πà‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô data
          if (dataStr === ":ping" || dataStr === '":ping"') continue;
          if (!dataStr) continue;

          // ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ó‡∏µ‡πà server ‡∏≠‡∏≤‡∏à‡∏™‡πà‡∏á‡∏°‡∏≤: {content:"..."} ‡∏´‡∏£‡∏∑‡∏≠ delta ‡πÅ‡∏ö‡∏ö OpenAI
          try {
            const parsed = JSON.parse(dataStr);
            const direct =
              typeof parsed?.content === "string" ? parsed.content : undefined;

            const delta =
              parsed?.choices?.[0]?.delta?.content ??
              parsed?.delta?.content ??
              parsed?.text ??
              undefined;

            if (direct !== undefined) {
              emitContent(direct);
            } else if (typeof delta === "string") {
              emitContent(delta);
            }
            // ‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ‚Üí ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á emit
          } catch {
            // ‡∏™‡∏ï‡∏£‡∏¥‡∏á‡∏î‡∏¥‡∏ö
            emitContent(dataStr);
          }
        }
      }

      // flush ‡∏Å‡πâ‡∏≠‡∏ô‡∏ó‡πâ‡∏≤‡∏¢ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢ "\n\n")
      const tail = buffer.trim();
      if (tail && tail !== "[DONE]") {
        try {
          const parsed = JSON.parse(tail);
          const direct =
            typeof parsed?.content === "string" ? parsed.content : undefined;
          const delta =
            parsed?.choices?.[0]?.delta?.content ??
            parsed?.delta?.content ??
            parsed?.text ??
            undefined;

          if (direct !== undefined) emitContent(direct);
          else if (typeof delta === "string") emitContent(delta);
          else emitContent(tail);
        } catch {
          emitContent(tail);
        }
      }

      safeComplete();
    } catch (err: unknown) {
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏£‡∏≤ "‡∏à‡∏ö‡πÅ‡∏•‡πâ‡∏ß" ‡∏´‡∏£‡∏∑‡∏≠ "‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß" ‡πÅ‡∏•‡∏∞ error ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ô‡∏ß network-close ‡∏Å‡πá‡πÄ‡∏°‡∏¥‡∏ô
      const msg =
        err instanceof Error ? err.message : typeof err === "string" ? err : "";

      if (
        completed ||
        (gotAnyChunk &&
          typeof msg === "string" &&
          /network|abort|reset/i.test(msg))
      ) {
        console.warn("SSE closed after completion. Suppressed:", err);
        return;
      }

      safeComplete();

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á error message ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
      let userFriendlyMessage = "";

      if (typeof msg === "string") {
        if (/signal is aborted|abort|aborted/i.test(msg)) {
          userFriendlyMessage =
            "‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Context ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏ï‡πà‡∏≠";
        } else if (/timeout|timed out/i.test(msg)) {
          userFriendlyMessage =
            "‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏≠‡∏á‡πÅ‡∏ö‡πà‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏•‡∏á";
        } else if (/network|connection/i.test(msg)) {
          userFriendlyMessage =
            "‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢ ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï‡πÅ‡∏•‡∏∞‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á";
        } else if (/reset|closed/i.test(msg)) {
          userFriendlyMessage =
            "‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏´‡∏≤‡∏Å‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô ‡∏•‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Context ‡πÉ‡∏´‡∏°‡πà";
        }
      }

      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ message ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° ‡πÉ‡∏ä‡πâ default
      if (!userFriendlyMessage) {
        userFriendlyMessage =
          "‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏ñ‡∏π‡∏Å‡∏Ç‡∏±‡∏î‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏∞ ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Context ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÉ‡∏´‡∏°‡πà";
      }

      const userFriendlyError = new Error(userFriendlyMessage);
      // ‡πÄ‡∏Å‡πá‡∏ö original error ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debugging
      (userFriendlyError as any).originalError = err;

      throw userFriendlyError;
    }
  }

  /**
   * Chat Request (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö non-streaming chat)
   * @param url - endpoint URL
   * @param message - ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á
   * @param config - fetch configuration
   */
  async chat(
    url: string,
    message: string,
    config?: FetchConfig
  ): Promise<string> {
    const fullUrl = `${this.baseURL}${url}`;
    this.logRequest("POST", fullUrl, { message });

    const response = await this.fetchWithTimeout(fullUrl, {
      ...this.getDefaultConfig(),
      ...config,
      method: "POST",
      body: JSON.stringify({ message }),
    });

    if (!response.ok || !response.body) {
      throw new Error(`HTTP Error ${response.status}: ${response.statusText}`);
    }

    const reader = response.body.getReader();
    const decoder = new TextDecoder("utf-8");

    let result = "";

    while (true) {
      const { done, value } = await reader.read();
      if (done) break;

      const chunk = decoder.decode(value, { stream: true });
      result += chunk;
    }

    return result;
  }
}
/**
 * Singleton Instance - ‡πÉ‡∏ä‡πâ instance ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ó‡∏±‡πà‡∏ß‡∏ó‡∏±‡πâ‡∏á‡πÅ‡∏≠‡∏û
 */
const apiClient = new ApiClient();

export default apiClient;

/**
 * Get full API URL with /api/v1 path
 */
export const getApiUrl = (path: string = ""): string => {
  const baseUrl = getBaseUrl();
  const apiPath = `/api/v1${path}`;
  return `${baseUrl}${apiPath}`;
};
